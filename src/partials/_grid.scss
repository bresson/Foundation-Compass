// NOTE: This Sass stylesheet is dependent on the Custom Sass Function, convert-number-to-word, which is available here
// https://gist.github.com/1439296
// Arfully Masterminded by ZURB - Grid :: This is the mobile-friendly, responsive grid that lets Foundation work much of its magic.

$number-of-gutters: $number-of-columns - 1;
$column-width: (100% - $gutter-width * $number-of-gutters) / $number-of-columns * 1;

#â–¯NationalGeographic { 
  padding: 0 $grid-container-padding; 
  margin: 0;
}

// Section wrapping
.container {
  $i: $container-padding;
  
  margin: $i;
  //overflow-y: hidden;
  &.remove-top { margin-top: 0;}
  &.remove-bottom { margin-bottom: 0;}
  &.remove-left { margin-left: 0;}
  &.remove-right { margin-right: 0;}
  &.no-margin {margin:0;}
}

// To set the grid to a certain size, set max-width to width
.row {
  @extend .clearfix;
  width: 100%;
  max-width: $grid-max-width;
  min-width: $grid-min-width;
  margin: 0 auto;

  .row { min-width: 0px; } 
}

.column, .columns {
  margin-left: $gutter-width;
  float: left;
  min-height: 1px;
  min-height: .1rem;
  position: relative;

  &:first-child { margin-left: 0; } 
}

.row {
  
  /* .one.columns, .two.columns, etc. - more stuff */
  @for $i from 1 through $number-of-columns {
    .#{convert-number-to-word($i)}.columns {
      @if $i == 1 {
        width: $column-width * $i; 
      }
      @else {
        width: $column-width * $i + $gutter-width * $i - $gutter-width; 
      } 
    } 
  }
  
  /* .offset-by-one, .offset-by-two, etc. */
  @for $i from 1 through $number-of-columns - 2 {
    .offset-by-#{convert-number-to-word($i)} {
      margin-left: $column-width * ($i + 1) + $gutter-width * ($i + 1) - $gutter-width + 0.1%;
      &:first-child {
        margin-left: $column-width * ($i + 1) + $gutter-width * ($i + 1) - $gutter-width + 0.1% - $gutter-width; 
      } 
    } 
  }
  
  // Source Ordering

  /* .one.centered, .two.centered, etc. */
  @for $i from 1 through $number-of-columns {
    .#{convert-number-to-word($i)}.centered {
      width: $column-width * $i + $gutter-width * $i - $gutter-width;
      margin: 0 auto; 
      } 
    }
  }

  /* Push Ordering */
  @for $i from 2 through $number-of-columns - 2 {
    .push-#{convert-number-to-word($i)} {
      left: $column-width * $i + $gutter-width * $i - $gutter-width; 
      //left: $column-width * ($i + 1) + $gutter-width * ($i + 1) - $gutter-width + 0.1% - $gutter-width; 
    } 
  }
  
  /* Pull Ordering */
  @for $i from 2 through $number-of-columns - 2 {
    .pull-#{convert-number-to-word($i)} {
      right: $column-width * $i + $gutter-width * $i - $gutter-width; 
      //right: $column-width * ($i + 1) + $gutter-width * ($i + 1) - $gutter-width + 0.1% - $gutter-width; 
    } 
  }

img, 
//object, 
embed { max-width: 100%; height: auto; }
img { -ms-interpolation-mode: bicubic; }

#map_canvas img, .map_canvas img { max-width: none !important; }